<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://moyujiang.github.io</id>
    <title>摸鱼世界</title>
    <updated>2020-07-23T09:13:46.910Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://moyujiang.github.io"/>
    <link rel="self" href="https://moyujiang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://moyujiang.github.io/images/avatar.png</logo>
    <icon>https://moyujiang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 摸鱼世界</rights>
    <entry>
        <title type="html"><![CDATA[二分图匹配(最大匹配：匈牙利算法)]]></title>
        <id>https://moyujiang.github.io/post/er-fen-tu-pi-pei-zui-da-pi-pei-xiong-ya-li-suan-fa/</id>
        <link href="https://moyujiang.github.io/post/er-fen-tu-pi-pei-zui-da-pi-pei-xiong-ya-li-suan-fa/">
        </link>
        <updated>2020-07-23T07:54:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>前些时间康了一下染色法判定二分图的板子，那今天就来说说关于二分图的另外一个算法：</p>
<p><strong>匈牙利算法。</strong></p>
<hr>
<h1 id="相关芝士">相关芝士</h1>
<p>[post cid=&quot;192&quot; cover=&quot;https://www.moyujiang.com/usr/uploads/2020/04/2638346125.jpg&quot;/]</p>
<hr>
<p>简单介绍一下概念。</p>
<p><strong>二分图</strong>，就是能（把图中的点分为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mo separator="true">,</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">U,V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>两个集合，且图中的边只在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi><mo separator="true">,</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">U,V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>之间出现）的图。也就是对于分出的集合来说，集合<strong>内部</strong>不能有边。能分出来的图就是二分图。</p>
<p>另外的一种定义是：不含有「含奇数条边的环」的图。</p>
<p>比如这是一张二分图：</p>
<figure data-type="image" tabindex="1"><img src="https://www.moyujiang.com/usr/uploads/2020/05/177322138.png" alt="g1.png" loading="lazy"></figure>
<p>但是我们一般将其明显表示为二分图，就把两个集合的点放置在两边，就像这样：</p>
<figure data-type="image" tabindex="2"><img src="https://www.moyujiang.com/usr/uploads/2020/05/3093434165.png" alt="g2.png" loading="lazy"></figure>
<p>以上。</p>
<p><strong>匹配</strong>，即一个边的集合，在这个边的集合中，任意两条边都没有公共顶点。比如下图中的蓝边就是一个[匹配]。</p>
<figure data-type="image" tabindex="3"><img src="https://www.moyujiang.com/usr/uploads/2020/05/3067581005.png" alt="g3.png" loading="lazy"></figure>
<p>懂了匹配的概念，还要引入几个浅显的概念：<strong>匹配点，匹配边，未匹配点，非匹配边</strong>。</p>
<hr>
<p><strong>匹配点</strong>就是由这个匹配（一定要记住“匹配”是一个边的集合）中的边所连起来的点，没有被连起来的就是<strong>未匹配点</strong>。<strong>匹配边</strong>和<strong>非匹配边</strong>同理。</p>
<p><strong>最大匹配</strong>，所有的匹配中，所包含的边数最多的匹配。</p>
<p>补充概念：<s>我也不懂</s></p>
<blockquote>
<p><strong>完美匹配</strong>，即每个左边集合中的点都可以通过匹配中的边找到一个唯一的右边集合中的点。当然，当所有点都是匹配点的时候，这个匹配就是一个完美匹配。</p>
<p><strong>交替路</strong>：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。</p>
<p><strong>增广路</strong>：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替 路称为增广路（agumenting path）。</p>
</blockquote>
<p>下图的蓝边就是一个完美匹配的例子：</p>
<figure data-type="image" tabindex="4"><img src="https://www.moyujiang.com/usr/uploads/2020/05/923749045.png" alt="g4.png" loading="lazy"></figure>
<hr>
<p>以上就是要了解的基本概念。（<strong>二分图，匹配，匹配点，匹配边，未匹配点，非匹配边，最大匹配</strong>）</p>
<p><strong>匈牙利算法</strong>，就是来解决求最大匹配包含的边的数量的算法。</p>
<p>让我们来通过**实例（真）**感性地理解一下算法流程。</p>
<p>以这个图片为例：</p>
<figure data-type="image" tabindex="5"><img src="https://www.moyujiang.com/usr/uploads/2020/05/550694499.png" alt="g5.png" loading="lazy"></figure>
<p>为了形象，我们把左边的点看做<strong>男孩们</strong>，右边的点就是<strong>女孩们</strong>，连边表示他们互相有好感<s>海王出来挨打</s>。现在要让你当这个月老，凑更多的cp<s>祸害人间</s>。</p>
<p><a href="https://www.acwing.com/problem/content/863/"><s>开始你的炸弹秀</s> 题目链接</a></p>
<p><strong>模拟开始！</strong></p>
<p>首先来给男孩1找对象，首先找到女孩5，发现她没有被匹配，于是<strong>暂时</strong>让他们成为一对，并且记录现在女孩5的对象是男孩1.</p>
<figure data-type="image" tabindex="6"><img src="https://www.moyujiang.com/usr/uploads/2020/05/3860132633.png" alt="" loading="lazy"></figure>
<p>然后就轮到男孩2了。很可惜，他所钟意的女孩5已经被暂时选中了，但是不能怂啊，于是我们找到女孩5的对象男孩1，让他试试能不能换一个（是的没错），然后发现男孩1可以匹配女孩6，那么就把1和6匹配起来，5就归2了。</p>
<p><s>这不是一个悲伤的故事</s></p>
<figure data-type="image" tabindex="7"><img src="https://www.moyujiang.com/usr/uploads/2020/05/1804024979.png" alt="" loading="lazy"></figure>
<p>男孩3顺利匹配到名花无主的女孩8.</p>
<figure data-type="image" tabindex="8"><img src="https://www.moyujiang.com/usr/uploads/2020/05/2774247874.png" alt="" loading="lazy"></figure>
<p>最后一个男孩4所连向的女孩5也已经被选中了，那这次我们再去看看原配2能不能换一个~~（霸气）<s>，但是非常悲伤的是，2已经</s>走投无路~~莫得选择了，所以男孩4很遗憾地失配了。</p>
<p>所以这张图中的最大匹配就是上图中的三条边。</p>
<p><strong>模拟结束</strong></p>
<hr>
<p>可以发现，在这个<s>找妹子</s>的过程中，我们始终坚持<strong>能让就让</strong>，这就是匈牙利算法的核心思想。</p>
<p>另外，对于这个腾位置的过程也是递归的，比如回去找到原配要求换的过程中，可能还会牵扯到另外的一些调整关系~~（就是乱）~~</p>
<hr>
<p><strong>代码部分</strong></p>
<pre><code class="language-cpp">int pre[510];
//[已经确定被匹配]的点的前驱
bool used[510];
//在[当前尝试的匹配]中被选中的标记

//尝试加入点u看是否能合理调整之后让匹配中边数更多
bool find(int u)
{
	for(int i=head[u];i;i=nxt[i])
	{
		int v=to[i];
		if(used[v])continue;
		//update:2020-5-30
		//这里标记是为了保证在腾出位置的时候
		//其他点无法选中这个要腾出来的点
		//在递归过程中也可以避免多个左部点选中一个右部点
		used[v]=1;
		if(!pre[v]||find(pre[v]))
		{
			pre[v]=u;
			return 1;
		}	
	}
	return 0;
}
//在主函数中：
for(int i=1;i&lt;=n;i++)
{
	memset(used,false,sizeof used);
	//对于每一轮，我们遍历过的另一边的点都不需要再次遍历了，但是每一轮之间是相对独立的。所以每次要进行初始化。
	if(find(i))cnt++;
	//如果加入当前这个点能让匹配的边数增加，干就完了。
}
	//最终的cnt就是最大匹配包含的边数
</code></pre>
<p>在递归过程中其实也进行了腾位，具体可以请读者自行模拟一下<s>我懒就不给大家画了</s>（咕了）</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>:</mo><mn>2020</mn><mo>−</mo><mn>5</mn><mo>−</mo><mn>17</mn></mrow><annotation encoding="application/x-tex">update:2020-5-17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span></span></span></span></p>
<p>更新一个小优化。</p>
<p>我们在每一次find一个点的时候，都进行了一次memset，花费的时间<s>显然</s>是有点多的，那能不能在这一步进行优化呢？</p>
<p>我们发现，在前一轮即使被遍历过的点，在这一轮也是没有影响的。但如果是这一轮被遍历的点，就不需要再遍历一次了。</p>
<p>于是我们可以想办法不清空used数组，但又需要区分这两个标记是否是在同一轮尝试中打上去的。所以可以考虑通过一个<strong>int</strong>类型的used数组，每一轮打上一个类似于时间戳的标记，第一轮打1，第二轮打2..以此类推。</p>
<p>这样就可以节约下n次memset的时间了。</p>
<p>代码块：</p>
<pre><code class="language-cpp">int pre[2000010];
int used[2000010];
//数组意义同上
int tag;
bool find(int u)
{
	for(int i=head[u];i;i=nxt[i])
	{
		int v=to[i];
		if(used[v]!=tag)
		{
			used[v]=tag;
			if(!pre[v]||find(pre[v]))
			{
				pre[v]=u;
				return 1;
			}
		}
	}
	return 0;
}
//每次在进入尝试之前需要改变全局变量tag的值，这样保证每一轮的标记不同就好。
</code></pre>
<h2 id="练习各种定理篇">练习&amp;各种定理篇</h2>
<hr>
<h1 id="könig定理">König定理</h1>
<p><a href="http://www.matrix67.com/blog/archives/116">二分图最大匹配的König定理及其证明 By matrix67</a></p>
<p>基础学习是从这篇博文里面学的，下面码一下自己的理解。</p>
<p>定理内容：<strong>二分图的最小点覆盖集＝二分图的最大匹配</strong></p>
<p>注意前提：在二分图中。</p>
<p>相关定义：什么是点覆盖集？</p>
<p>点覆盖：就是一个点集，满足该图的所有边都有至少一个顶点在这个点集中，点集大小最小的成为最小点覆盖</p>
<p>所以最小点覆盖集也就是要找到一个最小的点集**（每选择一个点就相当于选择了所有以此为一个端点的边）**，让这个点集包含所有的边并且点数最小。</p>
<p>最大匹配定义就是以上讲的匈牙利算法求得的<s>好东西</s>。</p>
<p>先讲方法。</p>
<p>假设我们已经在一个二分图中求得了一个最大匹配，并且包含了m条边。</p>
<figure data-type="image" tabindex="9"><img src="https://www.moyujiang.com/usr/uploads/2020/05/1367331042.png" alt="kng1.png" loading="lazy"></figure>
<p>然后要考虑如何构造一个点覆盖集。</p>
<p>首先从右部点中<strong>没有被匹配</strong>的点出发，走增广路（一条非匹配边，一条匹配边...），把一路上经过的点都打上标记（包括起点）</p>
<p>比如在这个图中，我们就可以通过右边没有被匹配的点<strong>5</strong>出发，依次经过5,2,4,0,6并把他们全部打上标记如下。</p>
<figure data-type="image" tabindex="10"><img src="https://www.moyujiang.com/usr/uploads/2020/05/214627532.png" alt="kng2.png" loading="lazy"></figure>
<p>完成了打标记的操作之后，我们只需要选取<strong>左部被标记的点与右部没有被标记的点</strong>，就组成了一个点覆盖集且是最小点覆盖集。</p>
<figure data-type="image" tabindex="11"><img src="https://www.moyujiang.com/usr/uploads/2020/05/3112038449.png" alt="kng3.png" loading="lazy"></figure>
<p>不仅如此，它还刚好选中了m个点。</p>
<p>为什么呢？</p>
<p>先来看看在我们这个标记的规则下，增广路有哪些奇怪的性质：</p>
<p>对于每条我们经过了的增广路<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，两边的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo separator="true">,</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">u,v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>必定都被标记了（确实必定），然后我们以边的走向分为两部分。</p>
<p>1.从左部点走向右部点</p>
<p>2.从右部点走向左部点</p>
<h2 id="首先为什么这么选择下来就是一个点覆盖集">首先，为什么这么选择下来就是一个点覆盖集？</h2>
<p>首先，我们先试探着选择<strong>左部被标记的点</strong>。</p>
<p>对于在<strong>经过的</strong>增广路径上的点，很明显可以通过选出其中左部端点囊括这一部分。（即选取左部被标记了的点）</p>
<p>然后，对于<strong>不在增广路</strong>上并且在<strong>选取了左部标记点后没有被覆盖</strong>的边，它所连接的右部点一定是没有被标记的。</p>
<p>为什么？</p>
<p>假设有这样一条神奇的边<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>被标记，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>没有。</p>
<p>如果这条边是匹配边，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的标记一定是从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>经过得到的，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>应该被标记，矛盾。</p>
<p>如果这条边是非匹配边，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的标记来自于另一条匹配边，按照增广路的定义，还可以<strong>继续走向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span></strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>应该被标记，矛盾。</p>
<p>综合，没被覆盖的边连向的右部点一定没有被标记，所以把它们选中就可以覆盖剩下的边了。</p>
<p>QED。</p>
<h2 id="然后为什么这么选择下来一定选中了m个点">然后，为什么这么选择下来一定选中了m个点？</h2>
<p>回顾标记过程，我们从<strong>右部</strong>没有被选中的点出发，走<strong>增广路</strong>并沿途打标记。</p>
<p>如果我们能在出发之后走向一个左部的点，那么这个左部的点<strong>一定还能继续走下去</strong>。也就是这个点原本有对应的匹配并且不是这个未被选中的右部点，<strong>否则该右部点会被标记</strong>。</p>
<p>因此，<strong>被选中的左部点的个数＝经过的匹配边数</strong></p>
<p>接下来再看右部点。</p>
<p>每一条<strong>没有被覆盖</strong>并且<strong>不在增广路上</strong>的边，连向的右部点一定是没有被选中的。（同上）</p>
<p>所以只需要选择这些没有被选中的右部点，就囊括了这些边。</p>
<p>因为每个没有被选中的右部点，连且仅连向一条匹配边，所以<strong>未被选中的右部点的个数=剩余的匹配边数</strong>。</p>
<p>两者相加，刚好就是匹配边的数量。</p>
<p>QED。</p>
<h2 id="最后为什么这么选择下来一定是最小的点覆盖">最后，为什么这么选择下来一定是最小的点覆盖？</h2>
<p><strong>覆盖m条匹配边至少需要m个点。</strong></p>
<p>QED。</p>
<p>于是这个定理就被<s>感性</s>证明了。</p>
<hr>
<p>p.s. 以下结论只粗略进行以下感性理解，具体证明<s>下次也不一定更新</s></p>
<h3 id="最大点独立集总点数-最大匹配边数">最大点独立集＝总点数－最大匹配边数</h3>
<blockquote>
<p>最大点独立集：在二分图中，选最多的点，使得任意两个点之间没有直接边连接。</p>
</blockquote>
<p>由以上证明可知，最大匹配边数＝最小点覆盖集。</p>
<p>而最大点独立集只需要我们从所有的点中，<strong>把最小点覆盖集中的点全部删去</strong>，所剩下的点就一<s>滴</s>条边都不剩了，所以它们当然是点独立集。至于为啥最大，<s>不想写了</s>。</p>
<p>另：最小边覆盖（选择最小的边覆盖所有的点）=最大点独立集</p>
<hr>
<h2 id="题目代码-讲解有空一定更">题目&amp;代码 讲解有空一定更</h2>
<p><a href="https://vjudge.net/problem/ZOJ-1140">ZOJ-1140</a></p>
<p><a href="https://www.moyujiang.com/usr/uploads/2020/05/700783902.cpp">代码：Courses 课程.cpp</a></p>
<p><a href="https://vjudge.net/problem/ZOJ-1364">ZOJ-1364</a></p>
<p><a href="https://www.moyujiang.com/usr/uploads/2020/05/897187059.cpp">Zju1364 Machine Schedule.cpp</a></p>
<p>留言：2020.5.30 题目下次一定更新</p>
<p>（题目下次一定更新）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://moyujiang.github.io/post/hello-gridea/</id>
        <link href="https://moyujiang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>